image: docker:latest

stages:
  - Prepare
  - Build
  - Test
  - Deploy

variables:
  DOCKER_DRIVER: overlay2
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

services:
  - name: docker:dind

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY

Checkout:
  stage: Prepare
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_BRANCH || $CI_COMMIT_TAG
  script:
    - |
      if [[ "$CI_PIPELINE_SOURCE" == "schedule" ]]; then
        tag="edge" && echo "tag=edge" > build.env
        latest=false && echo "latest=false" >> build.env
      else
        if [[ ! -z "$CI_COMMIT_BRANCH" ]]; then
          tag="$CI_COMMIT_BRANCH" && echo "tag=$CI_COMMIT_BRANCH" > build.env
          latest=false && echo "latest=false" >> build.env
        elif [[ ! -z "$CI_COMMIT_TAG" ]]; then
          tag="$CI_COMMIT_TAG" && echo "tag=$CI_COMMIT_TAG" > build.env
          if [[ "$CI_COMMIT_TAG" =~ /^v+$/  ]]; then
            latest=true && echo "latest=true" >> build.env
          else
            latest=false && echo "latest=false" >> build.env
          fi
        fi
      fi
      if [[ -z "$tag" ]] || [[ -z "$latest" ]]; then
        echo -e "❌ \e[1;31mVariables Error\e[0m"
        exit 1
      else
        echo -e "\n✅ Version : \e[1;32m${tag}\e[0m"
        echo -e "✅ Latest  : \e[1;5m${latest}\e[0m"
      fi
  artifacts:
    reports:
      dotenv: build.env

Build:
  stage: Build
  needs: 
    - job: "Checkout"
      artifacts: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_BRANCH || $CI_COMMIT_TAG
  script:
    - |
      docker pull $CI_REGISTRY_IMAGE:$tag || true
    - >
      docker build
      --pull
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg no_proxy=$no_proxy
      --cache-from $CI_REGISTRY_IMAGE:$tag
      --label "org.opencontainers.image.title=NGINX, PHP and RTMP"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.source=$CI_PROJECT_URL"
      --label "org.opencontainers.image.documentation=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_TAG"
      --label "org.opencontainers.image.description=NGINX, PHP and Nginx RTMP Module Docker image based on Alpine Linux"
      --label "org.opencontainers.image.licenses=MIT"
      --label "org.opencontainers.image.vendor=k44sh"
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

Tests:
  stage: Test
  needs: 
    - job: "Checkout"
      artifacts: true
    - job: "Build"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_BRANCH || $CI_COMMIT_TAG
  script:
    - apk --update --no-cache add curl
    - |
      docker run --rm -d --name $CI_PROJECT_NAME -p 80:8080 $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      for i in $(seq 120); do
        status=$(docker inspect -f '{{ .State.Health.Status }}' $CI_PROJECT_NAME 2>/dev/null)
        if [[ $? -eq 0 ]]; then
          if [[ "${status}" == "healthy" ]]; then
            echo -e "\n✅ The container is \e[1;32mhealthy\e[0m after \e[1;5m${i}\e[0m seconds\n"
            docker logs $CI_PROJECT_NAME
            curl http://docker/ipp.php -v
            docker stop $CI_PROJECT_NAME >/dev/null
            exit 0
          elif [[ "${status}" == "unhealthy" ]]; then
            echo -e "❌ The container is \e[1;33munhealthy\e[0m"
            exit 1
          elif [[ "${status}" == "starting" ]]; then
            echo "... starting"
          else
            echo -e "❓ The container is in \e[1;31munknown\e[0m state ($status)"
            exit 1
          fi
        else
          echo -e "❌ \e[1;31mDocker error\e[0m"
        fi
        sleep 1
      done

Push:
  stage: Deploy
  needs: 
    - job: "Checkout"
      artifacts: true
    - job: "Tests"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_TAG =~ /^v.+$/
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$tag
    - docker push $CI_REGISTRY_IMAGE:$tag
    - |
      if [[ "$latest" == "true" ]] ; then
        docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
        docker push $CI_REGISTRY_IMAGE:latest
      fi